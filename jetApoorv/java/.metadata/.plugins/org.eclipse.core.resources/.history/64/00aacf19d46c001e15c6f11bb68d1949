package edu.columbia.gale3.mt;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.InputStreamReader;import java.util.ArrayList;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import edu.columbia.kutil.Util;/** * Run Jet from Java. Note that Jet runs best in batch mode, otherwise it is * waaay too slow. *  * @author kristen */public class NEMarkupJet {	static String[] jetArgs = {			"/proj/gale-safe/system/distill/tools/jet/runJet.sh", "FILELIST",			"INDIR", "OUTDIR" };	static class NERef {		String type, subtype;		ArrayList<String> nameRefs;		ArrayList<Integer> startindexes = new ArrayList<Integer>();		ArrayList<Integer> endindexes = new ArrayList<Integer>();		public NERef(String ty, String subty, ArrayList<String> names,				ArrayList<Integer> sindexes, ArrayList<Integer> eindexes) {			type = ty;			subtype = subty;			nameRefs = names;			endindexes = eindexes;			startindexes = sindexes;		}	}	static class DocRef {		ArrayList<NERef> neRefs = new ArrayList<NERef>();	}	static class ReferenceDocs {		public ArrayList<DocRef> allDocs = new ArrayList<DocRef>();	}	public ArrayList<ReferenceDocs> docsByRefId = new ArrayList<ReferenceDocs>();	public NEMarkupJet() {	}	public static void printUsage() {		System.err.println("usage: year lc|nc\n");		System.err				.println("year is 02, 03, .... This program assumes a file called mt**.ref.xml.");	}	public static void main(String[] args) {		if (args.length != 2) {			printUsage();			return;		}		NEMarkupJet markup = new NEMarkupJet();		MTEvalFile file = new MTEvalFile();		String year = args[0];// "02";		file.readReferenceFile(MTSettings.MT03_DIR + "/mt" + year + ".ref.xml");		markup.lowerCase = args[1].equals("lc");		markup.markupDocsForRef(file, year);	}	boolean lowerCase = false;	private void markupDocsForRef(MTEvalFile file, String year) {		ArrayList<String> docids = file.getDocIds();		System.out.println("Found " + docids.size() + " docs");		try {			File dir = new File(MTSettings.MT03_DIR + "/" + year + "-refdocs"					+ (lowerCase ? "-lc" : "-nc"));			dir.mkdirs();			ArrayList<File> docFiles = new ArrayList<File>();			for (int refId = 0; refId < 4; refId++) {				ReferenceDocs dr = new ReferenceDocs();				docsByRefId.add(dr);				ArrayList<String> docs = file.getReferenceDocs(refId, true);				for (int i = 0; i < docids.size(); i++) {					String doc = docs.get(i);					String docid = docids.get(i);					System.out.println(doc);					File filename = new File(dir + "/" + docid + "-ref" + refId							+ ".sgm");					createIndividualDocFile(doc, filename, lowerCase);					docFiles.add(filename);				}			}			runNewJet(dir + "/", docFiles, this, lowerCase);			for (int refId = 0; refId < 4; refId++) {				BufferedWriter bw = Util.openFileWriting(MTSettings.MT03_DIR						+ "/neMarkup" + refId + (lowerCase ? "-lc" : "-nc")						+ "-full.txt");				BufferedWriter tiny = Util.openFileWriting(MTSettings.MT03_DIR						+ "/neMarkup" + refId + (lowerCase ? "-lc" : "-nc")						+ "-short.txt");				ReferenceDocs dr = docsByRefId.get(refId);				for (int i = 0; i < docids.size(); i++) {					String docid = docids.get(i);					DocRef docref = dr.allDocs.get(i);					System.out.println(i + " / " + docids.size() + " " + docid);					System.out.println("NEs in doc:");					bw.write(docid + "\n");					for (NERef ref : docref.neRefs) {						System.out.println("\t" + ref.nameRefs);						StringBuilder sb = new StringBuilder();						sb.append("\t" + ref.type + "\t" + ref.subtype + "\t");						for (int j = ref.nameRefs.size() - 1; j >= 0; j--) {							String s = ref.nameRefs.get(j);							String orig = s;							s = s.replaceAll("\\([^)]*$", "");							s = s.replaceAll("^[^)]*\\)", "");							s = s.replaceAll("[\"\']", "");							if (!ref.nameRefs.contains(s))								ref.nameRefs.add(s);							s = s.replaceAll("-", " ");							if (!ref.nameRefs.contains(s))								ref.nameRefs.add(s);							s = s.replaceAll("\\p{Punct}", " ");							if (!ref.nameRefs.contains(s))								ref.nameRefs.add(s);						}						for (int j = 0; j < ref.nameRefs.size(); j++) {							sb.append(ref.nameRefs.get(j));							tiny.write(ref.nameRefs.get(j));							if (j != ref.nameRefs.size() - 1) {								sb.append("|");								tiny.write("|");							}						}						tiny.write("\n");						bw.write(sb.toString() + "\n");					}					bw.flush();				}				bw.close();				tiny.close();			}		} catch (Exception e) {			e.printStackTrace();		}	}	public void addDocument(File apffile, int refid) {		try {			ReferenceDocs rd = docsByRefId.get(refid);			DocRef docref = new DocRef();			rd.allDocs.add(docref);			Document doc = Util.readXMLDocument(apffile);			NodeList nl = doc.getElementsByTagName("entity");			for (int i = 0; i < nl.getLength(); i++) {				Element entity = (Element) nl.item(i);				ArrayList<String> names = new ArrayList<String>();				NodeList mentions = entity						.getElementsByTagName("entity_mention");				NodeList attr = entity						.getElementsByTagName("entity_attributes");				for (int j = 0; j < attr.getLength(); j++) {					NodeList nameElems = ((Element) attr.item(j))							.getElementsByTagName("name");					for (int k = 0; k < nameElems.getLength(); k++) {						String n = nameElems.item(k).getTextContent();						if (!names.contains(n))							names.add(n);					}				}				for (int j = 0; j < mentions.getLength(); j++) {					Element mention = (Element) mentions.item(j);					String type = mention.getAttribute("TYPE");					if (!type.equals("NAM"))						continue;					Element node;					// node= (Element) mention.getElementsByTagName(					// "extent").item(0);					// Node charseq = node.getChildNodes().item(0);					// String name = node.getTextContent();					// name = name.replaceAll("\\s+", " ");					// if (!names.contains(name))					// names.add(name);					node = (Element) mention.getElementsByTagName("head").item(							0);					Node charseq = node.getChildNodes().item(0);					String name = node.getTextContent();					name = name.replaceAll("\\s+", " ");					if (!names.contains(name))						names.add(name);				}				if (names.size() == 0)					continue;				NERef ref = new NERef(entity.getAttribute("TYPE"), entity						.getAttribute("SUBTYPE"), names, null, null);				docref.neRefs.add(ref);			}		} catch (Exception e) {			e.printStackTrace();		}	}	public static void createIndividualDocFile(String textString, File newFile,			boolean lowerCase) {		try {			BufferedWriter bw = Util.openFileWriting(newFile);			bw.write("<DOC id=\"docid\">\n<TEXT>\n");			if (lowerCase) {				textString = textString.toLowerCase();			}			bw.write(Util.escapeXML(textString).replaceAll("&", "&amp;"));			bw.write("\n</TEXT>\n</DOC>\n");			bw.close();		} catch (Exception e) {			e.printStackTrace();		}	}	static boolean runProcess = true;	public static void runNewJet(String dir, ArrayList<File> filenames,			NEMarkupJet markup, boolean lowercase) {		try {			if (runProcess) {				// String dir = newfile.getParentFile().getAbsolutePath() + "/";				jetArgs[2] = dir;				jetArgs[3] = dir;				File tmpFile = File.createTempFile("jet", ".list");				jetArgs[1] = tmpFile.getAbsolutePath();				BufferedWriter bw = new BufferedWriter(new FileWriter(tmpFile));				for (File s : filenames)					bw.write(s.getName() + "\n");				bw.close();				for (String s : jetArgs)					System.err.print(s + " ");				System.err.println();				ProcessBuilder pb = new ProcessBuilder(jetArgs);				pb.directory(new File(						"/proj/gale-safe/system/distill/tools/jet/"));				Process p = pb.start();				BufferedReader pr = new BufferedReader(new InputStreamReader(p						.getInputStream()));				String line;				while ((line = pr.readLine()) != null) {					System.out.println(line);				}				pr = new BufferedReader(new InputStreamReader(p						.getErrorStream()));				while ((line = pr.readLine()) != null) {					System.out.println(line);				}				pr.close();				p.destroy();			}			// File outfile = new File(newfile.getAbsolutePath() + ".apf");			// System.out.println("Successfully ran Jet, output is in " +			// outfile);			for (File f : filenames) {				String path = f.getAbsolutePath();				String ref = path.replaceFirst("^.*-ref([0-9])\\..*$", "$1");				markup.addDocument(new File(f.getAbsolutePath() + ".apf"),						Integer.parseInt(ref));			}			// newfile.delete();			// outfile.delete();		} catch (Exception e) {			e.printStackTrace();		}	}}